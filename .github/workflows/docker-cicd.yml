name: CICD
run-name: Running
on:
  push:
    branches:
      - AWS

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04 #ubuntu-20.04
    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up environment variables
        run: |
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_HUB_PASSWORD=${{ secrets.DOCKER_HUB_PASSWORD }}" >> $GITHUB_ENV

      ## 1) 스프링 프로젝트 jar 파일 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      ## 2) Docker Hub에 이미지 push 하기
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/polaroad:latest
          build-args: |
            JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
            KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      - name: Login to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            sudo yarn update && sudo yarn install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker

      - name: Set Environment Variables on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo 'export DATABASE_URL="${{ secrets.DATABASE_URL }}"' | sudo tee -a /etc/environment
            echo 'export DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}"' | sudo tee -a /etc/environment
            echo 'export DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"' | sudo tee -a /etc/environment
            echo 'export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"' | sudo tee -a /etc/environment
            echo 'export KAKAO_API_KEY="${{ secrets.KAKAO_API_KEY }}"' | sudo tee -a /etc/environment
            echo 'export KAKAO_REDIRECT_URI="${{ secrets.KAKAO_REDIRECT_URI }}"' | sudo tee -a /etc/environment
            echo 'export MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"' | sudo tee -a /etc/environment
            echo 'export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"' | sudo tee -a /etc/environment
            echo 'export KEYSTORE_PASSWORD="${{ secrets.KEYSTORE_PASSWORD }}"' | sudo tee -a /etc/environment
            # 적용을 위해 SSH 세션 내에서 환경 변수 로드
            source /etc/environment

      ## 3) Docker Hub에 Push한 이미지를 리눅스 서버에 받아와서 run
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            docker ps -aq | xargs -r docker rm
            docker rmi watershell/polaroad:latest
            docker pull watershell/polaroad:latest
            docker-compose up -d