name: CICD
run-name: Running
on:
  push:
    branches:
      - AWS

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04 #ubuntu-20.04
    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> $GITHUB_ENV
          echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_ENV

      ## 1) 스프링 프로젝트 jar 파일 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

      ## 2) Docker Hub에 이미지 push 하기
      - name: Docker build
        run: |
          echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/text-in-the-road-server:0.1 . 
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/text-in-the-road-server:0.1
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

      - name: Prepare Docker Compose
        run: |
          sed -i 's/\${DATABASE_URL}/"${{ secrets.DATABASE_URL }}"/g' docker-compose.yml
          sed -i 's/\${DATABASE_USERNAME}/"${{ secrets.DATABASE_USERNAME }}"/g' docker-compose.yml
          sed -i 's/\${DATABASE_PASSWORD}/"${{ secrets.DATABASE_PASSWORD }}"/g' docker-compose.yml
          sed -i 's/\${JWT_SECRET_KEY}/"${{ secrets.JWT_SECRET_KEY }}"/g' docker-compose.yml
          sed -i 's/\${KAKAO_API_KEY}/"${{ secrets.KAKAO_API_KEY }}"/g' docker-compose.yml
          sed -i 's/\${KAKAO_REDIRECT_URI}/"${{ secrets.KAKAO_REDIRECT_URI }}"/g' docker-compose.yml
          sed -i 's/\${MAIL_PASSWORD}/"${{ secrets.MAIL_PASSWORD }}"/g' docker-compose.yml
          sed -i 's/\${REDIS_PASSWORD}/"${{ secrets.REDIS_PASSWORD }}"/g' docker-compose.yml

      ## 3) Docker Hub에 Push한 이미지를 리눅스 서버에 받아와서 run
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
            docker rm $(docker ps -a -q)
            docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/text-in-the-road-server:0.1
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/text-in-the-road-server:0.1
            docker-compose up -d